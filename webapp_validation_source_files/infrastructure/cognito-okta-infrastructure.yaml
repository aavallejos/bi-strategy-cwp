AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cognito User Pool con integraci√≥n Okta SSO'

Parameters:
  ProjectName:
    Type: String
    Default: 'excel-pipeline'
  OktaDomain:
    Type: String
    Description: 'Dominio de Okta (ej: company.okta.com)'
  OktaMetadataURL:
    Type: String
    Description: 'URL de metadata SAML de Okta'

Resources:
  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${ProjectName}-user-pool'
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
        - Name: given_name
          AttributeDataType: String
          Required: true
        - Name: family_name
          AttributeDataType: String
          Required: true

  # Cognito Identity Provider (Okta)
  OktaIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ProviderName: Okta
      ProviderType: SAML
      ProviderDetails:
        MetadataURL: !Ref OktaMetadataURL
        SSORedirectBindingURI: !Sub 'https://${OktaDomain}/app/aws_cognito/exampleapp/sso/saml'
      AttributeMapping:
        email: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress
        given_name: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname
        family_name: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname

  # Cognito User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub '${ProjectName}-app-client'
      GenerateSecret: false
      SupportedIdentityProviders:
        - Okta
        - COGNITO
      CallbackURLs:
        - !Sub 'https://${AmplifyApp}.amplifyapp.com/callback'
      LogoutURLs:
        - !Sub 'https://${AmplifyApp}.amplifyapp.com/logout'
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - email
        - profile
      AllowedOAuthFlowsUserPoolClient: true

  # Cognito Identity Pool
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub '${ProjectName}-identity-pool'
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName

  # IAM Roles para usuarios autenticados
  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-authenticated-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref CognitoIdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: S3UploadPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource: !Sub '${RawDataBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Ref RawDataBucket
                Condition:
                  StringLike:
                    's3:prefix': '${cognito-identity.amazonaws.com:sub}/*'

  # Role para diferentes tipos de usuarios
  UploaderRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-uploader-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
      Policies:
        - PolicyName: UploadOnlyPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub '${RawDataBucket}/uploads/${cognito-identity.amazonaws.com:sub}/*'

  ViewerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-viewer-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
      Policies:
        - PolicyName: ViewOnlyPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: 
                  - !Sub '${ProcessedDataBucket}/*'
                  - !Ref ProcessedDataBucket

  # Attachment de roles a Identity Pool
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedRole.Arn
      RoleMappings:
        OktaRoleMapping:
          Type: Rules
          AmbiguousRoleResolution: AuthenticatedRole
          RulesConfiguration:
            Rules:
              - Claim: 'custom:role'
                MatchType: Equals
                Value: 'uploader'
                RoleARN: !GetAtt UploaderRole.Arn
              - Claim: 'custom:role'
                MatchType: Equals
                Value: 'viewer'
                RoleARN: !GetAtt ViewerRole.Arn

Outputs:
  UserPoolId:
    Description: 'Cognito User Pool ID'
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolId'

  UserPoolClientId:
    Description: 'Cognito User Pool Client ID'
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolClientId'

  IdentityPoolId:
    Description: 'Cognito Identity Pool ID'
    Value: !Ref CognitoIdentityPool
    Export:
      Name: !Sub '${AWS::StackName}-IdentityPoolId'

  OktaProviderName:
    Description: 'Nombre del proveedor Okta'
    Value: !Ref OktaIdentityProvider